---
title: "Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems"
format: html
editor: visual
---

## Introduction
This project investigates the fiscal characteristics of major U.S. public transit systems using data from the National Transit Database (NTD). Our analysis focuses on fare revenues, operating expenses, vehicle miles traveled (VRM), and unlinked passenger trips (UPT) across various transit systems and modes. The goal is to evaluate system efficiency through metrics like farebox recovery, expenses per trip, and total trips taken, helping to identify top-performing agencies and modes.

## Data Sources

For this project, we used data from the [National Transit Database](https://www.transit.dot.gov/), because we want to evaluate farebox revenues, total number of trips, total number of vehicles miles traveled, and total revenues and expeses by souce, we would need the following datasets:

-   The [2022 Fares Revenues](https://www.transit.dot.gov/ntd/data-product/2022-annual-database-fare-revenues) dataset.
-   The latest [2022 Operating Expenses](https://www.transit.dot.gov/ntd/data-product/2022-operating-expenses) dataset.
-   The [Monthly Ridership](https://www.transit.dot.gov/ntd/data-product/monthly-module-adjusted-data-release) dataset.

Note: Take in consideration that our data may have some post-pandemic irregularities; however, we are not interested on long-term forecasts on this project.

The following code will download the data for you:

```{r}
#| echo: true
#| message: false
#| warning: false

if(!require("tidyverse")) install.packages("tidyverse")

# Let's start with the Fare Revenue Dataset:
library(tidyverse)
# Specify the file URL and destination file path
url <- "https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx"
destfile <- "2022_fare_revenue.xlsx"

# Check if the file exists, if not, download it
if(!file.exists(destfile)){
  # Try downloading using the "curl" method
  download.file(url, destfile = destfile, quiet = FALSE, method = "curl")
}

# Rename the dataset, select the columns we need, and group by the columns we want to summarize:

FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
  select(-`State/Parent NTD ID`, 
         -`Reporter Type`,
         -`Reporting Module`,
         -`TOS`,
         -`Passenger Paid Fares`,
         -`Organization Paid Fares`) |>
  filter(`Expense Type` == "Funds Earned During Period") |>
  select(-`Expense Type`) |>
  group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`
           `Agency Name`,  # These are direct operated and sub-contracted 
           `Mode`) |>      # of the same transit modality
  # Not a big effect in most munis (significant DO
  # tends to get rid of sub-contractors), but we'll sum
  # to unify different passenger experiences
  summarize(`Total Fares` = sum(`Total Fares`)) |>
  ungroup()

# Next, expenses dataset:

url <- "https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true"
destfile <- "2022_expenses.csv"

if(!file.exists("2022_expenses.csv")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "2022_expenses.csv" in your project
  # directory.
  download.file(url, destfile=destfile, quiet=FALSE, method="curl")
}

# Rename the dataset, select the columns we need, and group by the columns we want to summarize:
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
  select(`NTD ID`, 
         `Agency`,
         `Total`, 
         `Mode`) |>
  mutate(`NTD ID` = as.integer(`NTD ID`)) |>
  rename(Expenses = Total) |>
  group_by(`NTD ID`, `Mode`) |>
  summarize(Expenses = sum(Expenses)) |>
  ungroup()

FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```

Now, let's download the Monthly Ridership dataset:

```{r}
#| echo: true
#| message: false
#| warning: false


# Monthly Transit Numbers
library(tidyverse)
url= "https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx"
destfile="ridership.xlsx"
if(!file.exists("ridership.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "ridership.xlsx" in your project
    # directory.
    download.file(url,destfile=destfile, quiet=FALSE, method="curl")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="UPT") |>
            drop_na() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
            filter(`Mode/Type of Service Status` == "Active") |>
            select(-`Legacy NTD ID`, 
                   -`Reporter Type`, 
                   -`Mode/Type of Service Status`, 
                   -`UACE CD`, 
                   -`TOS`) |>
            pivot_longer(-c(`NTD ID`:`3 Mode`), 
                            names_to="month", 
                            values_to="VRM") |>
            drop_na() |>
            group_by(`NTD ID`, `Agency`, `UZA Name`, 
                     `Mode`, `3 Mode`, month) |>
            summarize(VRM = sum(VRM)) |>
            ungroup() |>
            mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
    mutate(`NTD ID` = as.integer(`NTD ID`))

```

The code above would crate a table as follows:

```{r}
#| echo: true
#| message: false
#| warning: false


if(!require("dplyr")) install.packages("dplyr")
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()

```

## Improve Readibility

We can improve the readability of the table by adding some formatting options:

1.  We want to change the name UZA Name to metro_area.**(Task 1)**


```{r}
USAGE <- USAGE |>
    rename(metro_area = `UZA Name`)
```

2.  We want to change the name of the unique **Mode** codes in our dataset function. First, I'll check all the codes with the **distinct** function. Then, remplace the codes with the corresponding mode names.

```{r}
#| echo: true
#| message: false
#| warning: false
#| 
if(!require("gt")) install.packages("gt")
library(gt)

unique_modes <- USAGE |> distinct(Mode)

# Display the modes using gt for a well-formatted table
gt(unique_modes) |> 
  tab_header(title = "Unique Modes in USAGE Dataset")

```
Then I'LL replace the codes with the corresponding mode names:**(Task 2)**


```{r}

USAGE <- USAGE |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail", 
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Motorbus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Rapid Bus",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Aerial Tramway",
    Mode == "TR" ~ "Trackless Trolley",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"  # For any unrecognized Mode codes
  ))
```

Now, we'll check the table again to see the changes: 

```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```

Now, It looks a little better; but we want to polish it even more. Therefore we are changing:
-NTD ID to Transit_ID
-3 Mode to Service_Mode
-UPT to Passenger_Trips
-VRM to Vehicle_Miles

```{r}
library(dplyr)

#| echo: true
#| message: false
#| warning: false
# Rename the columns with more specific names
USAGE <- USAGE |>
  rename(
    Transit_ID = `NTD ID`,    
    Service_Mode = `3 Mode`,    
    Passenger_Trips = UPT,       
    Vehicle_Miles = VRM          
  )
```    
```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
    mutate(month=as.character(month)) |> 
    DT::datatable()
```

Now, we can proceed to the analysis of the data, based on specific question:**(Task 3)**

1. What transit agency had the most total VRM in our data set?

```{r}

Usage_by_agency <- USAGE |>
  group_by(Agency) |>
  summarize(Total_VRM = sum(Vehicle_Miles)) |>
  arrange(desc(Total_VRM))|>
  head(1)

gt(Usage_by_agency) |>
  tab_header(title = "Usage by Agency")
```


2.What transit mode had the most total VRM in our data set?

```{r}

Usage_by_mode <- USAGE |>
  group_by(Mode) |>
  summarize(Total_VRM = sum(Vehicle_Miles)) |>
  arrange(desc(Total_VRM))|> 
  head(1)

gt(Usage_by_mode) |> 
  tab_header(title = "Usage by Mode")


```
3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?

```{r}

library(dplyr)
library(gt)

# Ensure the 'month' column is in Date format
USAGE <- USAGE |> 
  mutate(month = as.Date(month, format = "%Y-%m-%d"))  # Convert 'month' to Date format

# Filter the dataset and calculate total trips for NYC Subway in May 2024
NYC_Subway <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", 
         Mode == "Heavy Rail", 
         format(month, "%Y-%m") == "2024-05") |>  # Filter for May 2024
  summarize(Total_Trips = sum(Passenger_Trips))

# Display the result using gt
NYC_Subway |>
  gt() |>
  tab_header(title = "NYC Subway (Heavy Rail) Trips in May 2024")



```
5. How much did NYC subway ridership fall between April 2019 and April 2020?

```{r}
# Filter and summarize ridership for April 2019
ridership_april_2019 <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", 
         Mode == "Heavy Rail", 
         format(month, "%Y-%m") == "2019-04") |>
  summarize(Total_Trips_2019 = sum(Passenger_Trips))

# Filter and summarize ridership for April 2020
ridership_april_2020 <- USAGE |>
  filter(metro_area == "New York--Jersey City--Newark, NY--NJ", 
         Mode == "Heavy Rail", 
         format(month, "%Y-%m") == "2020-04") |>
  summarize(Total_Trips_2020 = sum(Passenger_Trips))

# Calculate the fall in ridership
ridership_fall <- ridership_april_2019$Total_Trips_2019 - ridership_april_2020$Total_Trips_2020

# Display the result using gt
data.frame(
  Year = c("April 2019", "April 2020", "Difference"),
  Total_Trips = c(ridership_april_2019$Total_Trips_2019, 
                  ridership_april_2020$Total_Trips_2020, 
                  ridership_fall)
) |>
  gt() |>
  tab_header(title = "NYC Subway Ridership Fall between April 2019 and April 2020")

```

Now we can Add 3 more interesting transit facts **(Task 4)**

1. Top 5 Agencies with the Highest Average Passenger Trips per Month

```{r}
top_agencies_by_trips <- USAGE |>
  group_by(Agency) |>
  summarize(Average_Trips = mean(Passenger_Trips, na.rm = TRUE)) |>
  arrange(desc(Average_Trips)) |>
  head(5)

top_agencies_by_trips |> 
  gt() |>
  tab_header(title = "Top 5 Agencies by Average Passenger Trips per Month")
```
2. Top 5 Agencies with the Longest Total Vehicle Miles

```{r}

top_agencies_by_miles_2020 <- USAGE |>
  filter(format(month, "%Y") == "2020") |>
  group_by(Agency) |>
  summarize(Total_Miles = sum(Vehicle_Miles, na.rm = TRUE)) |>
  arrange(desc(Total_Miles)) |>
  head(5)

# Display the result using gt
top_agencies_by_miles_2020 |> 
  gt() |>
  tab_header(title = "Top 5 Agencies with the Longest Total Vehicle Miles in 2020")

```
3. Top 5 service modes with the highest average passenger trips per month

```{r}

top_modes_by_trips <- USAGE |>
  group_by(Mode) |>
  summarize(Average_Trips = mean(Passenger_Trips, na.rm = TRUE)) |>
  arrange(desc(Average_Trips)) |>
  head(5)

top_modes_by_trips |>
  gt() |>
  tab_header(title = "Top 3 Service Modes by Average Passenger Trips per Month")

```

Now, we want to unify the two datasets to analyze the financials of the usage.**(Task 5)**'
To do that, we will have to merge the `FINANCIALS` and `USAGE` datasets on the `NTD ID` and `Mode` columns.
First, we need create a new table, taking in consideration the sum total of UPT (Passager_Trips) and VRM (Vehicle_miles) for 2022.

```{r}
USAGE_2022_ANNUAL <- USAGE |>
  filter(format(month, "%Y") == "2022") |>  # Filter for 2022 data
  group_by(Transit_ID, Agency, metro_area, Mode) |>  # Group by key columns
  summarize(
    Total_UPT = sum(Passenger_Trips, na.rm = TRUE),  # Sum UPT for 2022
    Total_VRM = sum(Vehicle_Miles, na.rm = TRUE)     # Sum VRM for 2022
  ) |> 
  rename(`NTD ID` = Transit_ID) |>  # Correct syntax for renaming
  ungroup()  # Ungroup after summarizing

# Display the first 5 rows of the resulting table
USAGE_2022_ANNUAL |> 
  head(5) |> 
  gt() |>
  tab_header(
    title = "Usage Data for 2022 (First 5 Rows)"
  )

```


We have to make sure that Mode has the same format in both datasets before merging them. We will use the same code as before to standardize the Mode column in the `FINANCIALS` dataset. 
```{r}

FINANCIALS <- FINANCIALS |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail", 
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Motorbus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Rapid Bus",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Aerial Tramway",
    Mode == "TR" ~ "Trackless Trolley",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"  # For any unrecognized Mode codes
  ))
```

```{r}


FINANCIALS |> 
  head(10) |>  # Display the first 10 rows
  gt() |>
  tab_header(
    title = "Usage and Financial Data for 2022 (First 10 Rows)"
  )

```


Once we have the `USAGE_2022_ANNUAL` dataset, we can merge it with the `FINANCIALS` dataset to create a new dataset that includes both financial and usage data for 2022.


```{r}
USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL, 
           FINANCIALS, 
           join_by(`NTD ID`, Mode)) |>
   drop_na()

USAGE_AND_FINANCIALS |>
  head(2) |>  # Display the first 10 rows
  gt() |>
  tab_header(
    title = "Usage and Financial Data for 2022"
  )

```



Based on this new dataset **USAGE_AND_FINANCIALS** we can answer the following questions: **(Task 6)**

1. Which transit system (agency and mode) had the most UPT in 2022?

```{r}
# Transit system with the most UPT in 2022
most_upt <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  arrange(desc(Total_UPT)) |> 
  select(Agency, Mode, Total_UPT) |> 
  head(1)

most_upt |>
  gt() |> 
  tab_header(title = "Transit System with the Most UPT in 2022")

```
2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares / Expenses)?
```{r}
# Transit system with the highest farebox recovery
highest_farebox_recovery <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  mutate(Farebox_Recovery = `Total Fares` / Expenses) |>
  arrange(desc(Farebox_Recovery)) |> 
  select(Agency, Mode, Farebox_Recovery) |> 
  head(1)

highest_farebox_recovery |>
  gt() |> 
  tab_header(title = "Transit System with the Highest Farebox Recovery in 2022")
```
3. Which transit system (agency and mode) has the lowest expenses per UPT?

```{r}
# Transit system with the lowest expenses per UPT
lowest_expenses_per_upt <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  mutate(Expenses_per_UPT = Expenses / Total_UPT) |>
  arrange(Expenses_per_UPT) |> 
  select(Agency, Mode, Expenses_per_UPT) |> 
  head(1)

lowest_expenses_per_upt |>
  gt() |> 
  tab_header(title = "Transit System with the Lowest Expenses per UPT in 2022")

```
4. Which transit system (agency and mode) has the highest total fares per UPT?
```{r}
# Transit system with the highest total fares per UPT
highest_fares_per_upt <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  mutate(Fares_per_UPT = `Total Fares` / Total_UPT) |>
  arrange(desc(Fares_per_UPT)) |> 
  select(Agency, Mode, Fares_per_UPT) |> 
  head(1)

highest_fares_per_upt |>
  gt() |> 
  tab_header(title = "Transit System with the Highest Total Fares per UPT in 2022")

```
5. Which transit system (agency and mode) has the lowest expenses per VRM?
```{r}
# Transit system with the lowest expenses per VRM
lowest_expenses_per_vrm <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  mutate(Expenses_per_VRM = Expenses / Total_VRM) |>
  arrange(Expenses_per_VRM) |> 
  select(Agency, Mode, Expenses_per_VRM) |> 
  head(1)

lowest_expenses_per_vrm |>
  gt() |> 
  tab_header(title = "Transit System with the Lowest Expenses per VRM in 2022")

```
6. Which transit system (agency and mode) has the highest total fares per VRM?
```{r}
# Transit system with the highest total fares per VRM
highest_fares_per_vrm <- USAGE_AND_FINANCIALS |>
  filter(Total_UPT > 400000) |>  # Restricting to major systems
  mutate(Fares_per_VRM = `Total Fares` / Total_VRM) |>
  arrange(desc(Fares_per_VRM)) |> 
  select(Agency, Mode, Fares_per_VRM) |> 
  head(1)

highest_fares_per_vrm |>
  gt() |> 
  tab_header(title = "Transit System with the Highest Total Fares per VRM in 2022")
```


## Conclusion

Based on the analysis, the MTA New York transit system emerges as the most efficient in the country, particularly in terms of moving the largest number of people. With the highest Unlinked Passenger Trips (UPT) in 2022, MTA New York demonstrates its ability to serve a massive population efficiently. While other systems may perform better in terms of cost-efficiency or farebox recovery, MTA's ability to transport more people than any other transit system makes it a clear leader in terms of operational scale.